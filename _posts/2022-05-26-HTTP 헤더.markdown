---
layout: post
title: HTTP 헤더
published: true
categories: HTTP
---

# HTTP 헤더
### 기본형태
header-field = field-name ":" OWS field-value OWS (OWS 띄어쓰기)

	HTTP/1.1 200 OK

    Content-Type: text/html;charset=UTF-8
    Content-Length: 3423			 	  

    <html>
     <body>...</body>
    </html>

### 용도
- HTTP 전송에 필요한 부가정보
- 많은 표준 헤더가 있음
- 필요시 임의의 헤더 추가가능

## RFC2616(과거, 폐기됨, 4개로 분류)
- General 헤더: 메시지 전체에 적용되는 정보, 예) Connection: close
- Request 헤더: 요청 정보, 예) User-Agent: Mozilla/5.0 (Macintosh; ..)
- Response 헤더: 응답 정보, 예) Server: Apache
- Entity 헤더: 엔티티 바디 정보, 예) Content-Type: text/html, Content-Length: 3423
- 엔티티 헤더는 엔티티 본문의 데이터를 해석할수 있는 정보 제공

## RFC723x(2014~)
- 엔티티(Entity) -> 표현(Representation)
- Representation = representation Metadata + Representation Data
- 표현 = 표현 메타데이터 + 표현 데이터

# 헤더 종류
## 표현
- Content-Type :  표현테이터 형식
- Content-Encoding:  표현 데이터의 압축 방식
- Content-Language:  표현 데이터의 자연 언어
- Content-Length:  표현 데이터의 길이


		HTTP/1.1 200 OK Content-Type: application/json Content-Length: 16 {"data":"hello"} 

### Content-Encoding
- 표현 데이터를 압축하기 위해 사용
- 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
- 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제

### Content-Langueage
- 실제 자연 언어 표현(ko,en)

### Content-Length
- Transfer-Encoding(전송  코딩)을  사용하면  Content-Length를  사용하면  안됨

## 협상
클라이언트가 선호하는 표현 요청 헤더
요청시에만 사용
- Accept:  클라이언트가  선호하는 미디어 타입 전달
- Accept-Charset:  클라이언트가  선호하는  문자  인코딩
- Accept-Encoding:  클라이언트가  선호하는  압축  인코딩
- Accept-Language:  클라이언트가  선호하는  자연  언어

### 협상 우선 순위
- 0~1 클수록 높은 우선순위
- 생략시 1
- 같은 종류이고 우선순위가 샹략시 구체적(상세)한 헤더가 우선순위가 높음



		GET /event Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, text/*;q=0.3,  text/html;q=0.7,  text/html;level=1, text/html;level=2;q=0.4,  */*;q=0.5

|Media Type |Quality|
|----------|-------:|
|Value text/html;level=1| 1|
|text/html| 0.7|
|text/plain |0.3|
|image/jpeg| 0.5|
|text/html;level=2 |0.4|
|text/html;level=3 |0.7|

## 전송 방식
- 단순 전송
- 압축 전송
- 분할 전송
- 범위 전송

### 단순 전송

### 압축 전송
Content-Encoding: gzip

### 분할전송
    Transfer-Encoding: chunked 
    5
    Hello
    5
    World
    0
    \r\n
    
- 사이즈를 지정 안됨

### 범위전송
Content-Range: bytes 1001-2000 / 2000


## 일반정보
- From:  유저  에이전트의 이메일 정보
- Referer:  이전  웹  페이지  주소
- User-Agent:  유저  에이전트  애플리케이션 정보
- Server:  요청을  처리하는  오리진 서버의 소프트웨어 정보
- Date:  메시지가  생성된 날짜

### From
- 유저 에이전트의 이메일 정보
- 일반적으로 잘 사용되지 않음
- 검색 엔진 같은 곳에서, 주로 사용
- 요청에서 사용

### Referer
- 이전 웹 페이지 주소
- 현재 요청된 페이지의 이전 웹 페이지 주소
- A -> B로  이동하는 경우 B를 요청할 때 
- Referer: A  를  포함해서  요청
- Referer를  사용해서  유입 경로 분석 가능
- 요청에서 사용

### User-Agent
- 유저 에이전트 애플리케이션 정보

		user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/ 537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36 
- 클리이언트의 애플리케이션 정보(웹 브라우저 정보, 등등) 
- 통계 정보
- 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
- 요청에서 사용

### Server
- 요청을 처리하는 ORIGIN  서버의 소프트웨어 정보
- Server: Apache/2.2.22 (Debian) 
- server: nginx 
- 응답에서 사용

### Date
- 메시지가 발생한 날짜와 시간

		Date: Tue, 15 Nov 1994 08:12:31 GMT 
        
- 응답에서 사용

## 특별한 정보
- Host:  요청한  호스트 정보(도메인) 
- Location:  페이지  리다이렉션
- Allow:  허용  가능한  HTTP  메서드
- Retry-After:  유저  에이전트가  다음  요청을  하기까지 기다려야 하는 시간


### Host
- 요청에서 사용
- 필수GET
- 하나의 서버가 여러 도메인을 처리해야 할 때
- 하나의 IP  주소에 여러 도메인이 적용되어 있을 때
- host를 명시함으로서 한서버가 가상 호스팅이 가능함

### Location
- 페이지 리다이렉션
- 웹 브라우저는 3xx  응답의 결과에 Location  헤더가  있으면, Location  위치로  자동  이동(리다이렉트) 
- 응답코드 3xx에서 설명
- 201 (Created): Location  값은  요청에  의해  생성된  리소스  URI 
- 3xx (Redirection): Location  값은  요청을  자동으로  리디렉션하기  위한  대상  리소스를 가리킴

### Allow
- 허용 가능한 HTTP  메서드를 명시
- 405 (Method Not Allowed) 에서  응답에  포함해야함
- Allow: GET, HEAD, PUT


### Retry-After
- 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간
- 503 (Service Unavailable):  서비스가  언제까지  불능인지  알려줄  수  있음
- Retry-After: Fri, 31 Dec 1999 23:59:59 GMT (날짜  표기) 
- Retry-After: 120 (초단위  표기)
- 점검시 사용

## 인증
- Authorization:  클라이언트  인증  정보를  서버에  전달
- WWW-Authenticate:  리소스  접근시  필요한  인증  방법 정의


		Authorization: Basic xxxxxxxxxxxxxxxx
        
### WWW-Authenticate
리소스 접근시 필요한 인증 방법 정의
-401 Unauthorized  응답과  함께  사용
		
        WWW-Authenticate: Newauth realm="apps", type=1,
        title="Login to \"apps\"", Basic realm="simple"
        
## 쿠키 
- Set-Cookie: 서버에서 클라이언트로 쿠키 전달(응답)
- Cookie: 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달
- 기존 방식으로는 매번 클라이언트가 값을 포함해줘야됬음
- 클라이언트는 서버로 부터 

		set-cookie: sessionId=abcde1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.com; Secure
        
값을 받을경우 해당 값을 쿠키 저장소에 저장해둔후 매 요청시마다 해당 값을 보냄
- 사용자 로그인 세션 관리, 광고 정보 트래킹
- 네트워크 트래픽 추가 유발, 최소한의 정보만 사용(세션 id, 인증 토큰)
- 보안에 민감한 데이터는 저장하면 안됨(주민번호, 신용카드 번호 등등)

## 쿠키 생명주기
### expires=Sat
- 만료일이 되면 쿠키 삭제

### max-age=3600(초)
- 0이나 음수를 지정하면 쿠키 삭제

### 세션 쿠키
- 만료 날짜를 생략하면 브라우저 종료시 까지만 유지

### 영속 쿠키
- 만료 날짜를 입력하면 해당 날짜까지 유지

## 쿠키 도메인
### damain=example.org
- 하위 도메인 접근 가능
- 생략시 하위 경로 접근 불가

### path=/home
- 이 경로를 포함한 하위 경로 페이지만 쿠키 접근

## 쿠키 보안
### Secure
- 쿠키는 http, https를 구분하지 않고 전송
- Secure를 적용하면 https인 경우에만 전송

### HttpOnly
- XSS 공격 방지
- 자바스크립트에서 접근 불가(document.cookie)
- HTTP 전송에만 사용

### SameSite
- XSRF 공격 방지
- 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송

# 캐시

## 캐시 기본동작
- 캐시가 없을경우 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야 한다.
- 캐시 헤더에 따라 받아온 데이터를 클라이언트내에 저장한후 정해진 시간동안 같은 요청을 할 시 서버가 아닌 저장된 클라이언트 내에서 데이터를 가져옴
- 캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다.

      HTTP/1.1 200 OK
      Content-Type: image/jpeg
      ## cache-control: max-age=60 
      Content-Length: 34012
      lkj123kljoiasudlkjaweioluywlnfdo912u34ljko98udjkla
      slkjdfl;qkawj9;o4ruawsldkal;skdjfa;ow9ejkl3123123

## 캐시 시간 초과
- 캐시 만료후에도 서버에서 데이터를 변경하지 않음
- 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용 할 수 있다.
- 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법 필요
1. 응답 결과에 데이터 최종 수정일을 같이 전송(Last-Modified: )
2. 캐시 시간이 초과후 요청시 1번에서 받은 최종 수정 시간을 같이 전송(if-modified-since:)
3. 서버는 실제 데이터와 최종 수정일을 비교후 같을경우 304 메세지를 전송(body 영역 없음)
4. 클라이언트는 304메세지를 받을경우 캐시에서 값을 가져오고 헤더 데이터를 갱신

## 캐시 시간 초과2
- Last-Modified / if-modified-since 는 1초 미만 단위로는 조정 불가능, 날짜 기반 로직
- 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
- 서버에서 별도의 캐시 로직을 관리하고 싶은 경우

### ETag(Entity Tag)
- 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠
- 데이터가 변경되면 이 이름을 바꾸어서 변경함
- 클라이언트는 단순히 이 값을 서버에 제공(클라이언트는 캐시 메커니즘을 모름)

## 캐시 제어 헤더
- Cache-Control: 캐시 제어
- Pragma: 캐시 제어(하위 호환)
- Expires: 캐시 유효 기간(하위 호환)

### Cache-Control
- Cache-Control: max-age - 캐시 유효 시간, 초 단위
- Cache-Control: no-cache - 데이터는 캐시해도 되지만, 항상 원(origin) 서버에 검증하고 사용
- Cache-Control: no-store - 데이터에 민감한 정보가 있으므로 저장하면 안됨

### Pragma
- Pragma: no-cache
- HTTP 1.0 하위 호환

### Expires
- expires: Mon, 01 Jan 1990 00:00:00 GMT
- 캐시 만료일을 정확한 날짜로 지정
- HTTP 1.0 부터 사용
- 지금은 더 유연한 Cache-Control: max-age 권장
- Cache-Control: max-age와 함께 사용하면 Expires는 무시

## 조건부 요청 헤더

### 검증해더
- ETag
- Last-Modified

### 조건부 요청해더
- If-Match, If-None-Match(ETag 대응)
- If-Modified-Since, If-Unmodified-Since(Last-Modified 대응)

## 프록시 캐시
- 거리가 먼 오리진 서버까지의 시간을 단축 하기 위해 사용(한국에서 미국에 있는 서버를 호출)
- 프록시 캐시 서버를 한번 걸쳐서 시간을 단축시킴
- 추가 사항 : 프록시 서버는 요청된 데이터를 가지고 있을경우 최근 날자만 비교후 전송, 요청된 데이터가 없거나 최신 날자가 아닌경우 오리진 서버에 접근해 데이터를 갱신후 전송, 시간은 더 오래 걸릴거 같지만 다수의 사용자가 요청시 한번에 처리 하기 때문에 시간은 더 단축

### 프록시 캐시 컨트롤
- Cache-Control: public - 응답이 public 캐시에 저장되어도 됨
- Cache-Control: private  - 응답이 해당 사용자만을 위한 것임, private 캐시에 저장해야 함(기본값)
- Cache-Control: s-maxage - 프록시 캐시에만 적용되는 max-age
- Age: 60 (HTTP 헤더) - 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간(초)

## 캐시무효화
- 통장 잔고 조회등 캐시가 무조건 저장이 안되야 되는경우 사용
- 주로 웹부라우저가 강제로 캐시를 생성하는 경우를 막는데 사용
- Cache-Control: no-cache, no-store, must-revalidate
- Pragma: no-cache(HTTP 1.0 하위 호환)

1. Cache-Control: no-cache 
- 데이터는 캐시해도 되지만, 항상 원(오리진) 서버에 검증하고 사용(이름에 주의!)
- 서버 설정에 따라 원 서버 접근 실패시에도 캐시 데이터(검증받지 못한)를 반환 할 수도 있음
2. Cache-Control: no-store 
- 데이터에 민감한 정보가 있으므로 저장하면 안됨
(메모리에서 사용하고 최대한 빨리 삭제)
3. Cache-Control: must-revalidate 
- 캐시 만료후 최초 조회시 원 서버에 검증해야함
- 원 서버 접근 실패시 반드시 오류가 발생해야함 - 504(Gateway Timeout)
- must-revalidate는 캐시 유효 시간이라면 캐시를 사용함
4. Pragma: no-cache 
- HTTP 1.0 하위 호환
