---
layout: post
title: HTTP 메서드
published: true
categories: js
---
## HTTP 상태코드
## API URI 고민
### 리소스의 의미
- 회원을 등록하고 수정하고 조회하는게 리소스가 아님
- 회원이라는 개념 자체가 리소스


	  • 회원 목록 조회 /read-member-list
      • 회원 조회 /read-member-by-id
      • 회원 등록 /create-member
      • 회원 수정 /update-member
      • 회원 삭제 /delete-member
      
      리소스로 구분시
      
	  • 회원 목록 조회 /members
	  • 회원 조회 /members/{id}
 	  • 회원 등록 /members/{id}
	  • 회원 수정 /members/{id}
	  • 회원 삭제 /members/{id}

## HTTP 메서드 종류
### 주요 메서드
- GET: 리소스 조회
- POST: 요청 데이터 처리, 주로 등록에 사용
- PUT: 리소스를 대체, 해당 리소스가 없으면 생성
- PATCH: 리소스 부분 변경
- DELETE: 리소스 삭제

### 기타 메서드
- HEAD: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
- OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
- CONNECT: 대상 자원으로 식별되는 서버에 대한 터널을 설정
- TRACE: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행

## GET
- 리소스 조회에 사용
- 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
- 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음

## POST
- 요청 데이터 처리
- 메시지 바디를 통해 서버로 요청 데이터 전달
- 서버는 요청 데이터를 처리 - 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
- 스팩 : POST 메서드는 대상 리소스가 리소스의 고유 한 의미 체계에 따라 요청에 포함 된 표현을 처리하도록 요청합니다.
- 리소스마다 따로 정해야 함 -> 정해진 것이 없음
- POST /orders/{orderId}/start-delivery (컨트롤 URI)

## PUT
- 리소스를 대체
- 리소스가 있으면 대체
- 리소스가 없으면 생성
- 클라이언트가 리소스를 식별
- 클라이언트가 리소스 위치를 알고 URI 지정
- 멱등(한번 호출하든 100번 호출하든 결과가 똑같음)함

## PATCH
- 리소스 부분 병경
- 멱등함

## DELETE
- 리소스 제거
- 멱등함

## 캐시가능
- 응답 결과 리소스를 캐시 해서 사용 가능 여부
- GET, HEAD, POST, PATCH 캐시가능
- 실제로는 GET, HEAD 정도만 캐시로 사용

